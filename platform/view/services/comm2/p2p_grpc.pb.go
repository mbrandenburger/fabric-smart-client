// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v6.32.1
// source: platform/view/services/comm2/p2p.proto

package comm2

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	P2PService_OpenSessionStream_FullMethodName = "/comm2.P2PService/OpenSessionStream"
)

// P2PServiceClient is the client API for P2PService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type P2PServiceClient interface {
	OpenSessionStream(ctx context.Context, opts ...grpc.CallOption) (P2PService_OpenSessionStreamClient, error)
}

type p2PServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewP2PServiceClient(cc grpc.ClientConnInterface) P2PServiceClient {
	return &p2PServiceClient{cc}
}

func (c *p2PServiceClient) OpenSessionStream(ctx context.Context, opts ...grpc.CallOption) (P2PService_OpenSessionStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &P2PService_ServiceDesc.Streams[0], P2PService_OpenSessionStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &p2PServiceOpenSessionStreamClient{stream}
	return x, nil
}

type P2PService_OpenSessionStreamClient interface {
	Send(*ViewPacket) error
	Recv() (*ViewPacket, error)
	grpc.ClientStream
}

type p2PServiceOpenSessionStreamClient struct {
	grpc.ClientStream
}

func (x *p2PServiceOpenSessionStreamClient) Send(m *ViewPacket) error {
	return x.ClientStream.SendMsg(m)
}

func (x *p2PServiceOpenSessionStreamClient) Recv() (*ViewPacket, error) {
	m := new(ViewPacket)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// P2PServiceServer is the server API for P2PService service.
// All implementations must embed UnimplementedP2PServiceServer
// for forward compatibility
type P2PServiceServer interface {
	OpenSessionStream(P2PService_OpenSessionStreamServer) error
	mustEmbedUnimplementedP2PServiceServer()
}

// UnimplementedP2PServiceServer must be embedded to have forward compatible implementations.
type UnimplementedP2PServiceServer struct {
}

func (UnimplementedP2PServiceServer) OpenSessionStream(P2PService_OpenSessionStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method OpenSessionStream not implemented")
}
func (UnimplementedP2PServiceServer) mustEmbedUnimplementedP2PServiceServer() {}

// UnsafeP2PServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to P2PServiceServer will
// result in compilation errors.
type UnsafeP2PServiceServer interface {
	mustEmbedUnimplementedP2PServiceServer()
}

func RegisterP2PServiceServer(s grpc.ServiceRegistrar, srv P2PServiceServer) {
	s.RegisterService(&P2PService_ServiceDesc, srv)
}

func _P2PService_OpenSessionStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(P2PServiceServer).OpenSessionStream(&p2PServiceOpenSessionStreamServer{stream})
}

type P2PService_OpenSessionStreamServer interface {
	Send(*ViewPacket) error
	Recv() (*ViewPacket, error)
	grpc.ServerStream
}

type p2PServiceOpenSessionStreamServer struct {
	grpc.ServerStream
}

func (x *p2PServiceOpenSessionStreamServer) Send(m *ViewPacket) error {
	return x.ServerStream.SendMsg(m)
}

func (x *p2PServiceOpenSessionStreamServer) Recv() (*ViewPacket, error) {
	m := new(ViewPacket)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// P2PService_ServiceDesc is the grpc.ServiceDesc for P2PService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var P2PService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "comm2.P2PService",
	HandlerType: (*P2PServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "OpenSessionStream",
			Handler:       _P2PService_OpenSessionStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "platform/view/services/comm2/p2p.proto",
}
